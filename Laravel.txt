если в терминале php artisan db:seed и получаю такую ошибку Class ... does not exist тогда ->composer dump-autoload

php artisan make:model Gidrant -f создать фабрику
php artisan make:model Gidrant -mf создать модель миграцию и фабрику
php artisan make:seeder GidrantTableSeeder создать сид

запускаем миграцию и сид (пересоздает все таблицы и заполняет данными)
php artisan migrate:refresh --seed

запускаем сид
php artisan db:seed --class=UsersTableSeeder
php artisan db:seed

все маршруты
php artisan route:list

создать rest контроллер
php artisan make:controller NameController -r

создание моделеи для работы с БД
php artisan make:model Name -m

Очистить кэш вьюшек
php artisan view:clear

Для создания символьной ссылки
php artisan storage:link
Само собой, когда файл сохранён и создана символьная ссылка, вы можете создать URL к файлу с помощью хелпера asset:
echo asset('storage/file.txt');

Создание страниц с ошибками \resources\views\errors (если хочеш их изменить)
php artisan vendor:publish --tag=laravel-errors
****************************************************************
Контроллер не должен заниматься валидацией, поэтому первое, что мы сделаем - создадим Request-класс и перенесем валидацию в него
Для валидации полученных от пользователя данных создаем request
php artisan make:request OperplanUpdateRequest

Репозиторий. Он может использоваться только для получения данных. Это по сути надстройка для модели.
Он создается ручками как обычный класс.

Обсервер для выполнения действий перед или после записи(создания, редактирования) в базу данных т.е. для каждой модели
php artisan make:observer OperplanObserver --model=Models\Operplan
Осталось зарегистрировать наблюдателя - пропишем необходимый код в AppServiceProvider:
public function boot()
    {
        Operplan::observe(OperplanObserver::class);
    }

Выносим бизнес логики в сервис-класс,
создаем папку Services и в ней могут располагаться некие классы для обработки чего либо.
Используя контейнер Laravel, мы внедрим и будем использовать сервис-класс в контроллере. 

Аутентификация
Шлюзы (гейты, gates) - это функции-замыкания, которые определяют, имеет ли пользователь право выполнить данное действие; они обычно определяются в классе App\Providers\AuthServiceProvider с помощью фасада Gate.
ИЛИ
Политики являются классами, организующими логику авторизации вокруг конкретной модели или ресурса. 
Команда make:policy создаст пустой класс политики. Если вы хотите создать класс c базовыми "CRUD" методами уже включенными в политику, можно указать опцию --model при выполнении команды:
php artisan make:policy PostPolicy --model=Post
----------------------------------------------------------------------------------------------------
Подготовка к копированию на сервер
.env
APP_ENV=production
APP_DEBUG=false
указываем данные для подключения к БД на сервере
сбрасываем кэш конфигурационных файлов -> php artisan config:cache
сбрасываем кэш routes:
1)php artisan route:cache
2)php artisan route:clear
Можно вручную решить этот вопрос — уже на хостинге зайти в папку <корневая папка>/bootstrap/cache переименовать файл config.php на config.php_old.
экспарнтируем БД в файл

+++копируем проект на хостинг++++

Разрешения 777 на папки storage и bootstrap/cache
импорт БД
в корне сайта создаем .htaccess
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteRule ^(.*)$ public/$1 [L]
</IfModule>

php artisan storage:link

php composer.phar require php-parallel-lint/php-console-color
php composer.phar require php-parallel-lint/php-console-highlighter
--------------------------------------------------------------------------------------------------
установка Laravel
1. OpenServer (в доменах прописать \operplan.lor\public)
2. Установить composer 
3. Установить Laravel через php composer.phar и авторизацию с подключением Bootstrap 
	настроить .env
4. Разрешения 777 на папки storage и bootstrap/cache
5. Установить плагин Laravel d PhpStorm; Laravel-ide-helper; 
6. Установить Laravel Debugbar или Laravel Telescope
запустить команду php composer.phar update

orchid/platform - плагин(платформа) для создания сайта на основе шаблона администратора
----------------------------------------------------------------------------------------------------
git clone https://github.com/seslvik/OPlaravel.git . (точка в конце если хочеш клонировать в текущую директорию)
один раз -> git fetch https://github.com/seslvik/OPlaravel.git (Данная команда связывается с указанным удалённым проектом и забирает все те данные проекта, которых у вас ещё нет. После того как вы выполнили команду, у вас должны появиться ссылки на все ветки из этого удалённого проекта, которые вы можете просмотреть или слить в любой момент.)
git pull https://github.com/seslvik/OPlaravel.git чтобы автоматически получить изменения из удалённой ветки и слить их со своей текущей. 